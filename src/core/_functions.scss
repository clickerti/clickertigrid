/// Convierte un valor en em o rem a px
/// @group   mq
/// @author  Raul Sanjuan
/// @param   {number} $value - var a convertir a pixeles.

@function toPx($value) {
	@if type-of($value) == number {
		@if unit($value) == "em" {
			@return calc(($value / 1em) * 16px);
		} @else if unit($value) == "rem" {
			@return calc(($value / 1rem) * 16px);
		} @else if unit($value) == "px" {
			@return $value;
		} @else {
			@error "La funcion toPx() solo acepta números en em o rem o px";
		}
	} @else {
		@error "La funcion toPx() solo acepta números en px, em o rem";
	}
}

/// Convierte un valor en em o px a rem
/// @group   mq
/// @author  Raul Sanjuan
/// @param   {number} $value - var a convertir a rem.

@function toRem($value) {
	@if type-of($value) == number {
		@if unit($value) == "px" {
			@return ($value / 16px) * 1rem;
		} @else {
			@error "La funcion toRem() solo acepta números en px";
		}
	} @else {
		@error "La funcion toRem() solo acepta números en px";
	}
}

/// Convierte un valor en rem o px a em
/// @group   mq
/// @author  Raul Sanjuan
/// @param   {number} $value - var a convertir a em.

@function toEm($value, $context: 16px) {
	@if type-of($value) == number {
		@if unit($value) == "px" {
			@return calc(($value / $context) * 1em);
		}
		// @else if unit($value) == "rem" {
		// 	@return ($value / $context) * 1em;
		// }
		@else {
			@error "La funcion toEm() solo acepta números en px";
		}
	} @else {
		@error 'La función em() requiere una unidad de pixeles como primer argumento (el segundo es opcional)';
	}
}

// replace substring with another string
// credits: https://css-tricks.com/snippets/sass/str-replace-function/
@function str-replace($string, $search, $replace: "") {
	$index: str-index($string, $search);
	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace +
			str-replace(
				str-slice($string, $index + str-length($search)),
				$search,
				$replace
			);
	}
	@return $string;
}

@function lightness($color, $lightnessMultiplier) {
	$color: str-replace($color, "var(");
	$color: str-replace($color, ")");
	$color-h: var(#{$color + "-h"});
	$color-s: var(#{$color + "-s"});
	$color-l: var(#{$color + "-l"});
	@return hsl(
		$color-h,
		$color-s,
		calc(#{$color-l} * #{$lightnessMultiplier})
	);
}

@function hexToRGB($hex) {
	@return red($hex), green($hex), blue($hex);
}
